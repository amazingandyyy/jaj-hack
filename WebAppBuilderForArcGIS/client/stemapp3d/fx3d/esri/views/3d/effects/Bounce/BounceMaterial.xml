<?xml version="1.0" encoding="UTF-8"?><!-- Copyright @ 2017 Esri. All rights reserved under the copyright laws of the United States and applicable international laws, treaties, and conventions. --><snippets><snippet name="bounceFS"><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
uniform float is;uniform vec3 ls;uniform vec4 mp;uniform vec4 ms;uniform vec4 sl;uniform vec3 ps;uniform float me;uniform sampler2D im;varying vec4 hd;varying vec3 dh;varying vec3 gg;void main(void){float a=is*0.01;gl_FragColor.rgb=hd.rgb;gl_FragColor.a=1.0;gl_FragColor=texture2D(im,gl_PointCoord)*gl_FragColor;gl_FragColor.a*=a*0.8;if(gl_FragColor.r<=1e-6&&gl_FragColor.g<=1e-6&&gl_FragColor.b<=1e-6){gl_FragColor.rgb=vec3(0.1,0.1,0.1);gl_FragColor.a*=0.1;}}]]></snippet><snippet name="bounceVS"><![CDATA[attribute vec3 $position;attribute vec2 $auxpos1;uniform mat4 io;uniform mat4 ip;uniform sampler2D ei;uniform vec2 po;uniform float me;uniform float sp;uniform vec2 ll;uniform sampler2D es;uniform vec3 ep;varying vec4 hd;varying vec3 dh;varying vec3 gg;varying vec3 hg; $linearInterpolator  $lonlat2position  $translationMat  $localTrans  $bounceEaseOut void main(void){float a=fract($auxpos1.y/po.x);float b=floor($auxpos1.y/po.y)/po.y;float c=(texture2D(ei,vec2(a,b))).r;float d=getLinearValue(ll,c);float e=mod(sp,me);float f=getBounceEaseOutValue(e,0.0,c,me);float g=getLinearValue(ll,f);vec3 h,i;mat4 j=mat4(1.0);
#ifdef GLOBAL
mat4 k=getTransMat($position);h=k[3].xyz;j=toRotationMat(k);vec4 l=vec4(0.0,0.0,1.0,0.0);i=(j*l).xyz;
#else
h=wgs84ToWebMerc($position);i=vec3(0.0,0.0,1.0);
#endif
dh=normalize(i);h+=(i*abs($auxpos1.x)*ep.z*g);if($auxpos1.x<0.0){gl_PointSize=getScope(ep.xy,d);}else{gl_PointSize=getScope(ep.xy,d)*0.4;}gl_Position=io*ip*vec4(h,1.0);gg=h;hd=texture2D(es,vec2(g,0.5));}]]></snippet><snippet name="timeInfoBounceFS"><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
uniform float is;uniform vec3 ls;uniform vec4 mp;uniform vec4 ms;uniform vec4 sl;uniform vec3 ps;uniform bool drawFlyPath;uniform float me;uniform sampler2D im;varying vec4 hd;varying vec3 dh;varying vec3 gg;varying vec4 hg; $quintEaseOut void main(void){float a=is*0.01;gl_FragColor.rgb=hd.rgb;gl_FragColor.a=1.0;if(drawFlyPath){float b=getQuintEaseInOutValue(hg.x,0.0,hg.z-1.0,me);if(hg.y>b){gl_FragColor.a=0.0;discard;}}else{gl_FragColor=texture2D(im,gl_PointCoord)*gl_FragColor;gl_FragColor.a*=a;}if(gl_FragColor.r<=1e-6&&gl_FragColor.g<=1e-6&&gl_FragColor.b<=1e-6){gl_FragColor.rgb=vec3(0.1,0.1,0.1);}}]]></snippet><snippet name="timeInfoBounceVS"><![CDATA[ $defines attribute vec3 $position;attribute vec2 $auxpos1;uniform mat4 io;uniform mat4 ip;uniform sampler2D ei;uniform vec2 po;uniform float me;uniform float sp;uniform vec2 ll;uniform sampler2D es;uniform bool drawFlyPath;uniform vec3 ep;uniform float currentIndex;varying vec4 hd;varying vec3 dh;varying vec3 gg;varying vec4 hg; $linearInterpolator  $lonlat2position  $translationMat  $localTrans  $bounceEaseOut void main(void){float a=fract($auxpos1.y/po.x);float b=floor($auxpos1.y/po.y)/po.y;float c=(texture2D(ei,vec2(a,b))).r;float d=getLinearValue(ll,c);float e=mod(sp,me);float f=getBounceEaseOutValue(e,0.0,c,me);float g=getLinearValue(ll,f);vec3 h,i;if(drawFlyPath){h=$position;dh=normalize(h);}else{mat4 j=mat4(1.0);
#ifdef GLOBAL
mat4 k=getTransMat($position);h=k[3].xyz;j=toRotationMat(k);vec4 l=vec4(0.0,0.0,1.0,0.0);i=(j*l).xyz;
#else
h=wgs84ToWebMerc($position);i=vec3(0.0,0.0,1.0);
#endif
dh=normalize(i);if(currentIndex==$auxpos1.y){h+=(i*abs($auxpos1.x)*ep.z*g);}else{h+=(i*abs($auxpos1.x)*ep.z*d);}if($auxpos1.x<0.0){gl_PointSize=getScope(ep.xy,d);}else{gl_PointSize=getScope(ep.xy,d)*0.4;}}if(drawFlyPath){hg=vec4(e,$auxpos1.x,$auxpos1.y,0.0);}gl_Position=io*ip*vec4(h,1.0);gg=h;hd=texture2D(es,vec2(d,0.5));}]]></snippet></snippets>